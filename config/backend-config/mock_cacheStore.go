// Code generated by MockGen. DO NOT EDIT.
// Source: ./config_cache.go

// Package backendconfig is a generated GoMock package.
package backendconfig

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pubsub "github.com/rudderlabs/rudder-server/utils/pubsub"
)

// Mockpublisher is a mock of publisher interface.
type Mockpublisher struct {
	ctrl     *gomock.Controller
	recorder *MockpublisherMockRecorder
}

// MockpublisherMockRecorder is the mock recorder for Mockpublisher.
type MockpublisherMockRecorder struct {
	mock *Mockpublisher
}

// NewMockpublisher creates a new mock instance.
func NewMockpublisher(ctrl *gomock.Controller) *Mockpublisher {
	mock := &Mockpublisher{ctrl: ctrl}
	mock.recorder = &MockpublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockpublisher) EXPECT() *MockpublisherMockRecorder {
	return m.recorder
}

// Subscribe mocks base method.
func (m *Mockpublisher) Subscribe(ctx context.Context, topic Topic) pubsub.DataChannel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, topic)
	ret0, _ := ret[0].(pubsub.DataChannel)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockpublisherMockRecorder) Subscribe(ctx, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*Mockpublisher)(nil).Subscribe), ctx, topic)
}

// Mockcache is a mock of cache interface.
type Mockcache struct {
	ctrl     *gomock.Controller
	recorder *MockcacheMockRecorder
}

// MockcacheMockRecorder is the mock recorder for Mockcache.
type MockcacheMockRecorder struct {
	mock *Mockcache
}

// NewMockcache creates a new mock instance.
func NewMockcache(ctrl *gomock.Controller) *Mockcache {
	mock := &Mockcache{ctrl: ctrl}
	mock.recorder = &MockcacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockcache) EXPECT() *MockcacheMockRecorder {
	return m.recorder
}

// get mocks base method.
func (m *Mockcache) get(ctx context.Context) (ConfigT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "get", ctx)
	ret0, _ := ret[0].(ConfigT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// get indicates an expected call of get.
func (mr *MockcacheMockRecorder) get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "get", reflect.TypeOf((*Mockcache)(nil).get), ctx)
}
