// Code generated by MockGen. DO NOT EDIT.
// Source: pgnotifier.go

// Package mock_pgnotifier is a generated GoMock package.
package mock_pgnotifier

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgnotifier "github.com/rudderlabs/rudder-server/services/pgnotifier"
	warehouseutils "github.com/rudderlabs/rudder-server/warehouse/utils"
)

// MockPgNotifier is a mock of PgNotifier interface.
type MockPgNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockPgNotifierMockRecorder
}

// MockPgNotifierMockRecorder is the mock recorder for MockPgNotifier.
type MockPgNotifierMockRecorder struct {
	mock *MockPgNotifier
}

// NewMockPgNotifier creates a new mock instance.
func NewMockPgNotifier(ctrl *gomock.Controller) *MockPgNotifier {
	mock := &MockPgNotifier{ctrl: ctrl}
	mock.recorder = &MockPgNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPgNotifier) EXPECT() *MockPgNotifierMockRecorder {
	return m.recorder
}

// Claim mocks base method.
func (m *MockPgNotifier) Claim(workerID string) (pgnotifier.ClaimT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Claim", workerID)
	ret0, _ := ret[0].(pgnotifier.ClaimT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Claim indicates an expected call of Claim.
func (mr *MockPgNotifierMockRecorder) Claim(workerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Claim", reflect.TypeOf((*MockPgNotifier)(nil).Claim), workerID)
}

// ClearJobs mocks base method.
func (m *MockPgNotifier) ClearJobs(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearJobs", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearJobs indicates an expected call of ClearJobs.
func (mr *MockPgNotifierMockRecorder) ClearJobs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearJobs", reflect.TypeOf((*MockPgNotifier)(nil).ClearJobs), ctx)
}

// GetDBHandle mocks base method.
func (m *MockPgNotifier) GetDBHandle() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBHandle")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// GetDBHandle indicates an expected call of GetDBHandle.
func (mr *MockPgNotifierMockRecorder) GetDBHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBHandle", reflect.TypeOf((*MockPgNotifier)(nil).GetDBHandle))
}

// Publish mocks base method.
func (m *MockPgNotifier) Publish(payload pgnotifier.MessagePayload, schema *warehouseutils.SchemaT, priority int) (chan []pgnotifier.ResponseT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", payload, schema, priority)
	ret0, _ := ret[0].(chan []pgnotifier.ResponseT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockPgNotifierMockRecorder) Publish(payload, schema, priority interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPgNotifier)(nil).Publish), payload, schema, priority)
}

// RunMaintenanceWorker mocks base method.
func (m *MockPgNotifier) RunMaintenanceWorker(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunMaintenanceWorker", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunMaintenanceWorker indicates an expected call of RunMaintenanceWorker.
func (mr *MockPgNotifierMockRecorder) RunMaintenanceWorker(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunMaintenanceWorker", reflect.TypeOf((*MockPgNotifier)(nil).RunMaintenanceWorker), ctx)
}

// SetupQueue mocks base method.
func (m *MockPgNotifier) SetupQueue() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupQueue")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupQueue indicates an expected call of SetupQueue.
func (mr *MockPgNotifierMockRecorder) SetupQueue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupQueue", reflect.TypeOf((*MockPgNotifier)(nil).SetupQueue))
}

// Subscribe mocks base method.
func (m *MockPgNotifier) Subscribe(ctx context.Context, workerId string, jobsBufferSize int) chan pgnotifier.ClaimT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, workerId, jobsBufferSize)
	ret0, _ := ret[0].(chan pgnotifier.ClaimT)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockPgNotifierMockRecorder) Subscribe(ctx, workerId, jobsBufferSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPgNotifier)(nil).Subscribe), ctx, workerId, jobsBufferSize)
}

// TrackAsyncBatch mocks base method.
func (m *MockPgNotifier) TrackAsyncBatch(batchID string, ch *chan []pgnotifier.ResponseT) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TrackAsyncBatch", batchID, ch)
}

// TrackAsyncBatch indicates an expected call of TrackAsyncBatch.
func (mr *MockPgNotifierMockRecorder) TrackAsyncBatch(batchID, ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackAsyncBatch", reflect.TypeOf((*MockPgNotifier)(nil).TrackAsyncBatch), batchID, ch)
}

// TrackUploadBatch mocks base method.
func (m *MockPgNotifier) TrackUploadBatch(batchID string, ch *chan []pgnotifier.ResponseT) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TrackUploadBatch", batchID, ch)
}

// TrackUploadBatch indicates an expected call of TrackUploadBatch.
func (mr *MockPgNotifierMockRecorder) TrackUploadBatch(batchID, ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackUploadBatch", reflect.TypeOf((*MockPgNotifier)(nil).TrackUploadBatch), batchID, ch)
}

// UpdateClaimedEvent mocks base method.
func (m *MockPgNotifier) UpdateClaimedEvent(claim *pgnotifier.ClaimT, response *pgnotifier.ClaimResponseT) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateClaimedEvent", claim, response)
}

// UpdateClaimedEvent indicates an expected call of UpdateClaimedEvent.
func (mr *MockPgNotifierMockRecorder) UpdateClaimedEvent(claim, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClaimedEvent", reflect.TypeOf((*MockPgNotifier)(nil).UpdateClaimedEvent), claim, response)
}
