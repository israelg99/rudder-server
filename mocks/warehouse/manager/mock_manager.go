// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package mock_manager is a generated GoMock package.
package mock_manager

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	misc "github.com/rudderlabs/rudder-server/utils/misc"
	client "github.com/rudderlabs/rudder-server/warehouse/client"
	warehouseutils "github.com/rudderlabs/rudder-server/warehouse/utils"
)

// MockManagerI is a mock of ManagerI interface.
type MockManagerI struct {
	ctrl     *gomock.Controller
	recorder *MockManagerIMockRecorder
}

// MockManagerIMockRecorder is the mock recorder for MockManagerI.
type MockManagerIMockRecorder struct {
	mock *MockManagerI
}

// NewMockManagerI creates a new mock instance.
func NewMockManagerI(ctrl *gomock.Controller) *MockManagerI {
	mock := &MockManagerI{ctrl: ctrl}
	mock.recorder = &MockManagerIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagerI) EXPECT() *MockManagerIMockRecorder {
	return m.recorder
}

// AddColumn mocks base method.
func (m *MockManagerI) AddColumn(tableName, columnName, columnType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddColumn", tableName, columnName, columnType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddColumn indicates an expected call of AddColumn.
func (mr *MockManagerIMockRecorder) AddColumn(tableName, columnName, columnType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddColumn", reflect.TypeOf((*MockManagerI)(nil).AddColumn), tableName, columnName, columnType)
}

// AlterColumn mocks base method.
func (m *MockManagerI) AlterColumn(tableName, columnName, columnType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterColumn", tableName, columnName, columnType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterColumn indicates an expected call of AlterColumn.
func (mr *MockManagerIMockRecorder) AlterColumn(tableName, columnName, columnType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterColumn", reflect.TypeOf((*MockManagerI)(nil).AlterColumn), tableName, columnName, columnType)
}

// Cleanup mocks base method.
func (m *MockManagerI) Cleanup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cleanup")
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockManagerIMockRecorder) Cleanup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockManagerI)(nil).Cleanup))
}

// Connect mocks base method.
func (m *MockManagerI) Connect(warehouse warehouseutils.Warehouse) (client.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", warehouse)
	ret0, _ := ret[0].(client.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockManagerIMockRecorder) Connect(warehouse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockManagerI)(nil).Connect), warehouse)
}

// CrashRecover mocks base method.
func (m *MockManagerI) CrashRecover(warehouse warehouseutils.Warehouse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CrashRecover", warehouse)
	ret0, _ := ret[0].(error)
	return ret0
}

// CrashRecover indicates an expected call of CrashRecover.
func (mr *MockManagerIMockRecorder) CrashRecover(warehouse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CrashRecover", reflect.TypeOf((*MockManagerI)(nil).CrashRecover), warehouse)
}

// CreateSchema mocks base method.
func (m *MockManagerI) CreateSchema() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchema")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSchema indicates an expected call of CreateSchema.
func (mr *MockManagerIMockRecorder) CreateSchema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchema", reflect.TypeOf((*MockManagerI)(nil).CreateSchema))
}

// CreateTable mocks base method.
func (m *MockManagerI) CreateTable(tableName string, columnMap map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", tableName, columnMap)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockManagerIMockRecorder) CreateTable(tableName, columnMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockManagerI)(nil).CreateTable), tableName, columnMap)
}

// DownloadIdentityRules mocks base method.
func (m *MockManagerI) DownloadIdentityRules(arg0 *misc.GZipWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadIdentityRules", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadIdentityRules indicates an expected call of DownloadIdentityRules.
func (mr *MockManagerIMockRecorder) DownloadIdentityRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadIdentityRules", reflect.TypeOf((*MockManagerI)(nil).DownloadIdentityRules), arg0)
}

// FetchSchema mocks base method.
func (m *MockManagerI) FetchSchema(warehouse warehouseutils.Warehouse) (warehouseutils.SchemaT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSchema", warehouse)
	ret0, _ := ret[0].(warehouseutils.SchemaT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSchema indicates an expected call of FetchSchema.
func (mr *MockManagerIMockRecorder) FetchSchema(warehouse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSchema", reflect.TypeOf((*MockManagerI)(nil).FetchSchema), warehouse)
}

// GetTotalCountInTable mocks base method.
func (m *MockManagerI) GetTotalCountInTable(ctx context.Context, tableName string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalCountInTable", ctx, tableName)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalCountInTable indicates an expected call of GetTotalCountInTable.
func (mr *MockManagerIMockRecorder) GetTotalCountInTable(ctx, tableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalCountInTable", reflect.TypeOf((*MockManagerI)(nil).GetTotalCountInTable), ctx, tableName)
}

// IsEmpty mocks base method.
func (m *MockManagerI) IsEmpty(warehouse warehouseutils.Warehouse) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmpty", warehouse)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEmpty indicates an expected call of IsEmpty.
func (mr *MockManagerIMockRecorder) IsEmpty(warehouse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmpty", reflect.TypeOf((*MockManagerI)(nil).IsEmpty), warehouse)
}

// LoadIdentityMappingsTable mocks base method.
func (m *MockManagerI) LoadIdentityMappingsTable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadIdentityMappingsTable")
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadIdentityMappingsTable indicates an expected call of LoadIdentityMappingsTable.
func (mr *MockManagerIMockRecorder) LoadIdentityMappingsTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadIdentityMappingsTable", reflect.TypeOf((*MockManagerI)(nil).LoadIdentityMappingsTable))
}

// LoadIdentityMergeRulesTable mocks base method.
func (m *MockManagerI) LoadIdentityMergeRulesTable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadIdentityMergeRulesTable")
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadIdentityMergeRulesTable indicates an expected call of LoadIdentityMergeRulesTable.
func (mr *MockManagerIMockRecorder) LoadIdentityMergeRulesTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadIdentityMergeRulesTable", reflect.TypeOf((*MockManagerI)(nil).LoadIdentityMergeRulesTable))
}

// LoadTable mocks base method.
func (m *MockManagerI) LoadTable(tableName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadTable", tableName)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadTable indicates an expected call of LoadTable.
func (mr *MockManagerIMockRecorder) LoadTable(tableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTable", reflect.TypeOf((*MockManagerI)(nil).LoadTable), tableName)
}

// LoadTestTable mocks base method.
func (m *MockManagerI) LoadTestTable(location, stagingTableName string, payloadMap map[string]interface{}, loadFileFormat string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadTestTable", location, stagingTableName, payloadMap, loadFileFormat)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadTestTable indicates an expected call of LoadTestTable.
func (mr *MockManagerIMockRecorder) LoadTestTable(location, stagingTableName, payloadMap, loadFileFormat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTestTable", reflect.TypeOf((*MockManagerI)(nil).LoadTestTable), location, stagingTableName, payloadMap, loadFileFormat)
}

// LoadUserTables mocks base method.
func (m *MockManagerI) LoadUserTables() map[string]error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadUserTables")
	ret0, _ := ret[0].(map[string]error)
	return ret0
}

// LoadUserTables indicates an expected call of LoadUserTables.
func (mr *MockManagerIMockRecorder) LoadUserTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadUserTables", reflect.TypeOf((*MockManagerI)(nil).LoadUserTables))
}

// SetConnectionTimeout mocks base method.
func (m *MockManagerI) SetConnectionTimeout(timeout time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConnectionTimeout", timeout)
}

// SetConnectionTimeout indicates an expected call of SetConnectionTimeout.
func (mr *MockManagerIMockRecorder) SetConnectionTimeout(timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConnectionTimeout", reflect.TypeOf((*MockManagerI)(nil).SetConnectionTimeout), timeout)
}

// Setup mocks base method.
func (m *MockManagerI) Setup(warehouse warehouseutils.Warehouse, uploader warehouseutils.UploaderI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", warehouse, uploader)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockManagerIMockRecorder) Setup(warehouse, uploader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockManagerI)(nil).Setup), warehouse, uploader)
}

// TestConnection mocks base method.
func (m *MockManagerI) TestConnection(warehouse warehouseutils.Warehouse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestConnection", warehouse)
	ret0, _ := ret[0].(error)
	return ret0
}

// TestConnection indicates an expected call of TestConnection.
func (mr *MockManagerIMockRecorder) TestConnection(warehouse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestConnection", reflect.TypeOf((*MockManagerI)(nil).TestConnection), warehouse)
}

// MockWarehouseDelete is a mock of WarehouseDelete interface.
type MockWarehouseDelete struct {
	ctrl     *gomock.Controller
	recorder *MockWarehouseDeleteMockRecorder
}

// MockWarehouseDeleteMockRecorder is the mock recorder for MockWarehouseDelete.
type MockWarehouseDeleteMockRecorder struct {
	mock *MockWarehouseDelete
}

// NewMockWarehouseDelete creates a new mock instance.
func NewMockWarehouseDelete(ctrl *gomock.Controller) *MockWarehouseDelete {
	mock := &MockWarehouseDelete{ctrl: ctrl}
	mock.recorder = &MockWarehouseDeleteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWarehouseDelete) EXPECT() *MockWarehouseDeleteMockRecorder {
	return m.recorder
}

// DeleteBy mocks base method.
func (m *MockWarehouseDelete) DeleteBy(tableName []string, params warehouseutils.DeleteByParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBy", tableName, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBy indicates an expected call of DeleteBy.
func (mr *MockWarehouseDeleteMockRecorder) DeleteBy(tableName, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBy", reflect.TypeOf((*MockWarehouseDelete)(nil).DeleteBy), tableName, params)
}

// DropTable mocks base method.
func (m *MockWarehouseDelete) DropTable(tableName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropTable", tableName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropTable indicates an expected call of DropTable.
func (mr *MockWarehouseDeleteMockRecorder) DropTable(tableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropTable", reflect.TypeOf((*MockWarehouseDelete)(nil).DropTable), tableName)
}

// MockWarehouseOperations is a mock of WarehouseOperations interface.
type MockWarehouseOperations struct {
	ctrl     *gomock.Controller
	recorder *MockWarehouseOperationsMockRecorder
}

// MockWarehouseOperationsMockRecorder is the mock recorder for MockWarehouseOperations.
type MockWarehouseOperationsMockRecorder struct {
	mock *MockWarehouseOperations
}

// NewMockWarehouseOperations creates a new mock instance.
func NewMockWarehouseOperations(ctrl *gomock.Controller) *MockWarehouseOperations {
	mock := &MockWarehouseOperations{ctrl: ctrl}
	mock.recorder = &MockWarehouseOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWarehouseOperations) EXPECT() *MockWarehouseOperationsMockRecorder {
	return m.recorder
}

// AddColumn mocks base method.
func (m *MockWarehouseOperations) AddColumn(tableName, columnName, columnType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddColumn", tableName, columnName, columnType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddColumn indicates an expected call of AddColumn.
func (mr *MockWarehouseOperationsMockRecorder) AddColumn(tableName, columnName, columnType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddColumn", reflect.TypeOf((*MockWarehouseOperations)(nil).AddColumn), tableName, columnName, columnType)
}

// AlterColumn mocks base method.
func (m *MockWarehouseOperations) AlterColumn(tableName, columnName, columnType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterColumn", tableName, columnName, columnType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterColumn indicates an expected call of AlterColumn.
func (mr *MockWarehouseOperationsMockRecorder) AlterColumn(tableName, columnName, columnType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterColumn", reflect.TypeOf((*MockWarehouseOperations)(nil).AlterColumn), tableName, columnName, columnType)
}

// Cleanup mocks base method.
func (m *MockWarehouseOperations) Cleanup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cleanup")
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockWarehouseOperationsMockRecorder) Cleanup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockWarehouseOperations)(nil).Cleanup))
}

// Connect mocks base method.
func (m *MockWarehouseOperations) Connect(warehouse warehouseutils.Warehouse) (client.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", warehouse)
	ret0, _ := ret[0].(client.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockWarehouseOperationsMockRecorder) Connect(warehouse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockWarehouseOperations)(nil).Connect), warehouse)
}

// CrashRecover mocks base method.
func (m *MockWarehouseOperations) CrashRecover(warehouse warehouseutils.Warehouse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CrashRecover", warehouse)
	ret0, _ := ret[0].(error)
	return ret0
}

// CrashRecover indicates an expected call of CrashRecover.
func (mr *MockWarehouseOperationsMockRecorder) CrashRecover(warehouse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CrashRecover", reflect.TypeOf((*MockWarehouseOperations)(nil).CrashRecover), warehouse)
}

// CreateSchema mocks base method.
func (m *MockWarehouseOperations) CreateSchema() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchema")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSchema indicates an expected call of CreateSchema.
func (mr *MockWarehouseOperationsMockRecorder) CreateSchema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchema", reflect.TypeOf((*MockWarehouseOperations)(nil).CreateSchema))
}

// CreateTable mocks base method.
func (m *MockWarehouseOperations) CreateTable(tableName string, columnMap map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", tableName, columnMap)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockWarehouseOperationsMockRecorder) CreateTable(tableName, columnMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockWarehouseOperations)(nil).CreateTable), tableName, columnMap)
}

// DeleteBy mocks base method.
func (m *MockWarehouseOperations) DeleteBy(tableName []string, params warehouseutils.DeleteByParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBy", tableName, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBy indicates an expected call of DeleteBy.
func (mr *MockWarehouseOperationsMockRecorder) DeleteBy(tableName, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBy", reflect.TypeOf((*MockWarehouseOperations)(nil).DeleteBy), tableName, params)
}

// DownloadIdentityRules mocks base method.
func (m *MockWarehouseOperations) DownloadIdentityRules(arg0 *misc.GZipWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadIdentityRules", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadIdentityRules indicates an expected call of DownloadIdentityRules.
func (mr *MockWarehouseOperationsMockRecorder) DownloadIdentityRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadIdentityRules", reflect.TypeOf((*MockWarehouseOperations)(nil).DownloadIdentityRules), arg0)
}

// DropTable mocks base method.
func (m *MockWarehouseOperations) DropTable(tableName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropTable", tableName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropTable indicates an expected call of DropTable.
func (mr *MockWarehouseOperationsMockRecorder) DropTable(tableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropTable", reflect.TypeOf((*MockWarehouseOperations)(nil).DropTable), tableName)
}

// FetchSchema mocks base method.
func (m *MockWarehouseOperations) FetchSchema(warehouse warehouseutils.Warehouse) (warehouseutils.SchemaT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSchema", warehouse)
	ret0, _ := ret[0].(warehouseutils.SchemaT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSchema indicates an expected call of FetchSchema.
func (mr *MockWarehouseOperationsMockRecorder) FetchSchema(warehouse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSchema", reflect.TypeOf((*MockWarehouseOperations)(nil).FetchSchema), warehouse)
}

// GetTotalCountInTable mocks base method.
func (m *MockWarehouseOperations) GetTotalCountInTable(ctx context.Context, tableName string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalCountInTable", ctx, tableName)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalCountInTable indicates an expected call of GetTotalCountInTable.
func (mr *MockWarehouseOperationsMockRecorder) GetTotalCountInTable(ctx, tableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalCountInTable", reflect.TypeOf((*MockWarehouseOperations)(nil).GetTotalCountInTable), ctx, tableName)
}

// IsEmpty mocks base method.
func (m *MockWarehouseOperations) IsEmpty(warehouse warehouseutils.Warehouse) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmpty", warehouse)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEmpty indicates an expected call of IsEmpty.
func (mr *MockWarehouseOperationsMockRecorder) IsEmpty(warehouse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmpty", reflect.TypeOf((*MockWarehouseOperations)(nil).IsEmpty), warehouse)
}

// LoadIdentityMappingsTable mocks base method.
func (m *MockWarehouseOperations) LoadIdentityMappingsTable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadIdentityMappingsTable")
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadIdentityMappingsTable indicates an expected call of LoadIdentityMappingsTable.
func (mr *MockWarehouseOperationsMockRecorder) LoadIdentityMappingsTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadIdentityMappingsTable", reflect.TypeOf((*MockWarehouseOperations)(nil).LoadIdentityMappingsTable))
}

// LoadIdentityMergeRulesTable mocks base method.
func (m *MockWarehouseOperations) LoadIdentityMergeRulesTable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadIdentityMergeRulesTable")
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadIdentityMergeRulesTable indicates an expected call of LoadIdentityMergeRulesTable.
func (mr *MockWarehouseOperationsMockRecorder) LoadIdentityMergeRulesTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadIdentityMergeRulesTable", reflect.TypeOf((*MockWarehouseOperations)(nil).LoadIdentityMergeRulesTable))
}

// LoadTable mocks base method.
func (m *MockWarehouseOperations) LoadTable(tableName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadTable", tableName)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadTable indicates an expected call of LoadTable.
func (mr *MockWarehouseOperationsMockRecorder) LoadTable(tableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTable", reflect.TypeOf((*MockWarehouseOperations)(nil).LoadTable), tableName)
}

// LoadTestTable mocks base method.
func (m *MockWarehouseOperations) LoadTestTable(location, stagingTableName string, payloadMap map[string]interface{}, loadFileFormat string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadTestTable", location, stagingTableName, payloadMap, loadFileFormat)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadTestTable indicates an expected call of LoadTestTable.
func (mr *MockWarehouseOperationsMockRecorder) LoadTestTable(location, stagingTableName, payloadMap, loadFileFormat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTestTable", reflect.TypeOf((*MockWarehouseOperations)(nil).LoadTestTable), location, stagingTableName, payloadMap, loadFileFormat)
}

// LoadUserTables mocks base method.
func (m *MockWarehouseOperations) LoadUserTables() map[string]error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadUserTables")
	ret0, _ := ret[0].(map[string]error)
	return ret0
}

// LoadUserTables indicates an expected call of LoadUserTables.
func (mr *MockWarehouseOperationsMockRecorder) LoadUserTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadUserTables", reflect.TypeOf((*MockWarehouseOperations)(nil).LoadUserTables))
}

// SetConnectionTimeout mocks base method.
func (m *MockWarehouseOperations) SetConnectionTimeout(timeout time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConnectionTimeout", timeout)
}

// SetConnectionTimeout indicates an expected call of SetConnectionTimeout.
func (mr *MockWarehouseOperationsMockRecorder) SetConnectionTimeout(timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConnectionTimeout", reflect.TypeOf((*MockWarehouseOperations)(nil).SetConnectionTimeout), timeout)
}

// Setup mocks base method.
func (m *MockWarehouseOperations) Setup(warehouse warehouseutils.Warehouse, uploader warehouseutils.UploaderI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", warehouse, uploader)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockWarehouseOperationsMockRecorder) Setup(warehouse, uploader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockWarehouseOperations)(nil).Setup), warehouse, uploader)
}

// TestConnection mocks base method.
func (m *MockWarehouseOperations) TestConnection(warehouse warehouseutils.Warehouse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestConnection", warehouse)
	ret0, _ := ret[0].(error)
	return ret0
}

// TestConnection indicates an expected call of TestConnection.
func (mr *MockWarehouseOperationsMockRecorder) TestConnection(warehouse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestConnection", reflect.TypeOf((*MockWarehouseOperations)(nil).TestConnection), warehouse)
}
