// Code generated by MockGen. DO NOT EDIT.
// Source: warehouse/processor.go

// Package mock_warehouse is a generated GoMock package.
package mock_warehouse

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	warehouse "github.com/rudderlabs/rudder-server/warehouse"
	warehouseutils "github.com/rudderlabs/rudder-server/warehouse/utils"
)

// MockProcessor is a mock of Processor interface.
type MockProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorMockRecorder
}

// MockProcessorMockRecorder is the mock recorder for MockProcessor.
type MockProcessorMockRecorder struct {
	mock *MockProcessor
}

// NewMockProcessor creates a new mock instance.
func NewMockProcessor(ctrl *gomock.Controller) *MockProcessor {
	mock := &MockProcessor{ctrl: ctrl}
	mock.recorder = &MockProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessor) EXPECT() *MockProcessorMockRecorder {
	return m.recorder
}

// stagingFiles mocks base method.
func (m *MockProcessor) stagingFiles(warehouse warehouseutils.Warehouse, startID, endID int64) ([]*warehouse.StagingFileT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "stagingFiles", warehouse, startID, endID)
	ret0, _ := ret[0].([]*warehouse.StagingFileT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// stagingFiles indicates an expected call of stagingFiles.
func (mr *MockProcessorMockRecorder) stagingFiles(warehouse, startID, endID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "stagingFiles", reflect.TypeOf((*MockProcessor)(nil).stagingFiles), warehouse, startID, endID)
}

// uploadToProcess mocks base method.
func (m *MockProcessor) uploadToProcess(availableWorkers int, skipIdentifiers []string) ([]*warehouse.UploadJobT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "uploadToProcess", availableWorkers, skipIdentifiers)
	ret0, _ := ret[0].([]*warehouse.UploadJobT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// uploadToProcess indicates an expected call of uploadToProcess.
func (mr *MockProcessorMockRecorder) uploadToProcess(availableWorkers, skipIdentifiers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "uploadToProcess", reflect.TypeOf((*MockProcessor)(nil).uploadToProcess), availableWorkers, skipIdentifiers)
}
