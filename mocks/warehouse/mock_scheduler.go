// Code generated by MockGen. DO NOT EDIT.
// Source: scheduler.go

// Package warehouse is a generated GoMock package.
package warehouse

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	warehouse "github.com/rudderlabs/rudder-server/warehouse"
	warehouseutils "github.com/rudderlabs/rudder-server/warehouse/utils"
)

// MockScheduler is a mock of Scheduler interface.
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMockRecorder
}

// MockSchedulerMockRecorder is the mock recorder for MockScheduler.
type MockSchedulerMockRecorder struct {
	mock *MockScheduler
}

// NewMockScheduler creates a new mock instance.
func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &MockSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduler) EXPECT() *MockSchedulerMockRecorder {
	return m.recorder
}

// canCreateUpload mocks base method.
func (m *MockScheduler) canCreateUpload(w warehouseutils.Warehouse) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "canCreateUpload", w)
	ret0, _ := ret[0].(bool)
	return ret0
}

// canCreateUpload indicates an expected call of canCreateUpload.
func (mr *MockSchedulerMockRecorder) canCreateUpload(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "canCreateUpload", reflect.TypeOf((*MockScheduler)(nil).canCreateUpload), w)
}

// createJobs mocks base method.
func (m *MockScheduler) createJobs(w warehouseutils.Warehouse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createJobs", w)
	ret0, _ := ret[0].(error)
	return ret0
}

// createJobs indicates an expected call of createJobs.
func (mr *MockSchedulerMockRecorder) createJobs(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createJobs", reflect.TypeOf((*MockScheduler)(nil).createJobs), w)
}

// createUploadJobsFromStagingFiles mocks base method.
func (m *MockScheduler) createUploadJobsFromStagingFiles(w warehouseutils.Warehouse, stagingFilesList []*warehouse.StagingFileT, priority int, uploadStartAfter time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "createUploadJobsFromStagingFiles", w, stagingFilesList, priority, uploadStartAfter)
}

// createUploadJobsFromStagingFiles indicates an expected call of createUploadJobsFromStagingFiles.
func (mr *MockSchedulerMockRecorder) createUploadJobsFromStagingFiles(w, stagingFilesList, priority, uploadStartAfter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createUploadJobsFromStagingFiles", reflect.TypeOf((*MockScheduler)(nil).createUploadJobsFromStagingFiles), w, stagingFilesList, priority, uploadStartAfter)
}

// deleteWaitingUploadJob mocks base method.
func (m *MockScheduler) deleteWaitingUploadJob(jobID int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "deleteWaitingUploadJob", jobID)
}

// deleteWaitingUploadJob indicates an expected call of deleteWaitingUploadJob.
func (mr *MockSchedulerMockRecorder) deleteWaitingUploadJob(jobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteWaitingUploadJob", reflect.TypeOf((*MockScheduler)(nil).deleteWaitingUploadJob), jobID)
}

// getLastUploadCreatedAt mocks base method.
func (m *MockScheduler) getLastUploadCreatedAt(w warehouseutils.Warehouse) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getLastUploadCreatedAt", w)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// getLastUploadCreatedAt indicates an expected call of getLastUploadCreatedAt.
func (mr *MockSchedulerMockRecorder) getLastUploadCreatedAt(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getLastUploadCreatedAt", reflect.TypeOf((*MockScheduler)(nil).getLastUploadCreatedAt), w)
}

// getLatestUploadStatus mocks base method.
func (m *MockScheduler) getLatestUploadStatus(w *warehouseutils.Warehouse) (int64, string, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getLatestUploadStatus", w)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// getLatestUploadStatus indicates an expected call of getLatestUploadStatus.
func (mr *MockSchedulerMockRecorder) getLatestUploadStatus(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getLatestUploadStatus", reflect.TypeOf((*MockScheduler)(nil).getLatestUploadStatus), w)
}

// getPendingStagingFiles mocks base method.
func (m *MockScheduler) getPendingStagingFiles(w warehouseutils.Warehouse) ([]*warehouse.StagingFileT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getPendingStagingFiles", w)
	ret0, _ := ret[0].([]*warehouse.StagingFileT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getPendingStagingFiles indicates an expected call of getPendingStagingFiles.
func (mr *MockSchedulerMockRecorder) getPendingStagingFiles(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getPendingStagingFiles", reflect.TypeOf((*MockScheduler)(nil).getPendingStagingFiles), w)
}

// initUpload mocks base method.
func (m *MockScheduler) initUpload(w warehouseutils.Warehouse, jsonUploadsList []*warehouse.StagingFileT, isUploadTriggered bool, priority int, uploadStartAfter time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "initUpload", w, jsonUploadsList, isUploadTriggered, priority, uploadStartAfter)
}

// initUpload indicates an expected call of initUpload.
func (mr *MockSchedulerMockRecorder) initUpload(w, jsonUploadsList, isUploadTriggered, priority, uploadStartAfter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "initUpload", reflect.TypeOf((*MockScheduler)(nil).initUpload), w, jsonUploadsList, isUploadTriggered, priority, uploadStartAfter)
}

// isUploadJobInProgress mocks base method.
func (m *MockScheduler) isUploadJobInProgress(w warehouseutils.Warehouse, jobID int64) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isUploadJobInProgress", w, jobID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// isUploadJobInProgress indicates an expected call of isUploadJobInProgress.
func (mr *MockSchedulerMockRecorder) isUploadJobInProgress(w, jobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isUploadJobInProgress", reflect.TypeOf((*MockScheduler)(nil).isUploadJobInProgress), w, jobID)
}
