// Code generated by MockGen. DO NOT EDIT.
// Source: upload.go

// Package mock_warehouse is a generated GoMock package.
package mock_warehouse

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	backendconfig "github.com/rudderlabs/rudder-server/config/backend-config"
	warehouse "github.com/rudderlabs/rudder-server/warehouse"
	warehouseutils "github.com/rudderlabs/rudder-server/warehouse/utils"
)

// MockUploadJob is a mock of UploadJob interface.
type MockUploadJob struct {
	ctrl     *gomock.Controller
	recorder *MockUploadJobMockRecorder
}

// MockUploadJobMockRecorder is the mock recorder for MockUploadJob.
type MockUploadJobMockRecorder struct {
	mock *MockUploadJob
}

// NewMockUploadJob creates a new mock instance.
func NewMockUploadJob(ctrl *gomock.Controller) *MockUploadJob {
	mock := &MockUploadJob{ctrl: ctrl}
	mock.recorder = &MockUploadJobMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploadJob) EXPECT() *MockUploadJobMockRecorder {
	return m.recorder
}

// Aborted mocks base method.
func (m *MockUploadJob) Aborted(attempts int, startTime time.Time) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aborted", attempts, startTime)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Aborted indicates an expected call of Aborted.
func (mr *MockUploadJobMockRecorder) Aborted(attempts, startTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aborted", reflect.TypeOf((*MockUploadJob)(nil).Aborted), attempts, startTime)
}

// areIdentityTablesLoadFilesGenerated mocks base method.
func (m *MockUploadJob) areIdentityTablesLoadFilesGenerated() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "areIdentityTablesLoadFilesGenerated")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// areIdentityTablesLoadFilesGenerated indicates an expected call of areIdentityTablesLoadFilesGenerated.
func (mr *MockUploadJobMockRecorder) areIdentityTablesLoadFilesGenerated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "areIdentityTablesLoadFilesGenerated", reflect.TypeOf((*MockUploadJob)(nil).areIdentityTablesLoadFilesGenerated))
}

// bulkInsertLoadFileRecords mocks base method.
func (m *MockUploadJob) bulkInsertLoadFileRecords(loadFiles []warehouse.LoadFileUploadOutputT) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "bulkInsertLoadFileRecords", loadFiles)
	ret0, _ := ret[0].(error)
	return ret0
}

// bulkInsertLoadFileRecords indicates an expected call of bulkInsertLoadFileRecords.
func (mr *MockUploadJobMockRecorder) bulkInsertLoadFileRecords(loadFiles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "bulkInsertLoadFileRecords", reflect.TypeOf((*MockUploadJob)(nil).bulkInsertLoadFileRecords), loadFiles)
}

// createLoadFiles mocks base method.
func (m *MockUploadJob) createLoadFiles(generateAll bool) (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createLoadFiles", generateAll)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// createLoadFiles indicates an expected call of createLoadFiles.
func (mr *MockUploadJobMockRecorder) createLoadFiles(generateAll interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createLoadFiles", reflect.TypeOf((*MockUploadJob)(nil).createLoadFiles), generateAll)
}

// deleteLoadFiles mocks base method.
func (m *MockUploadJob) deleteLoadFiles(stagingFiles []*warehouse.StagingFileT) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "deleteLoadFiles", stagingFiles)
}

// deleteLoadFiles indicates an expected call of deleteLoadFiles.
func (mr *MockUploadJobMockRecorder) deleteLoadFiles(stagingFiles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteLoadFiles", reflect.TypeOf((*MockUploadJob)(nil).deleteLoadFiles), stagingFiles)
}

// destinationRevisionIDMap mocks base method.
func (m *MockUploadJob) destinationRevisionIDMap() (map[string]backendconfig.DestinationT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "destinationRevisionIDMap")
	ret0, _ := ret[0].(map[string]backendconfig.DestinationT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// destinationRevisionIDMap indicates an expected call of destinationRevisionIDMap.
func (mr *MockUploadJobMockRecorder) destinationRevisionIDMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "destinationRevisionIDMap", reflect.TypeOf((*MockUploadJob)(nil).destinationRevisionIDMap))
}

// exportIdentities mocks base method.
func (m *MockUploadJob) exportIdentities() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "exportIdentities")
	ret0, _ := ret[0].(error)
	return ret0
}

// exportIdentities indicates an expected call of exportIdentities.
func (mr *MockUploadJobMockRecorder) exportIdentities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "exportIdentities", reflect.TypeOf((*MockUploadJob)(nil).exportIdentities))
}

// exportRegularTables mocks base method.
func (m *MockUploadJob) exportRegularTables(specialTables []string, loadFilesTableMap map[warehouse.TableNameT]bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "exportRegularTables", specialTables, loadFilesTableMap)
	ret0, _ := ret[0].(error)
	return ret0
}

// exportRegularTables indicates an expected call of exportRegularTables.
func (mr *MockUploadJobMockRecorder) exportRegularTables(specialTables, loadFilesTableMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "exportRegularTables", reflect.TypeOf((*MockUploadJob)(nil).exportRegularTables), specialTables, loadFilesTableMap)
}

// exportUserTables mocks base method.
func (m *MockUploadJob) exportUserTables(loadFilesTableMap map[warehouse.TableNameT]bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "exportUserTables", loadFilesTableMap)
	ret0, _ := ret[0].(error)
	return ret0
}

// exportUserTables indicates an expected call of exportUserTables.
func (mr *MockUploadJobMockRecorder) exportUserTables(loadFilesTableMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "exportUserTables", reflect.TypeOf((*MockUploadJob)(nil).exportUserTables), loadFilesTableMap)
}

// fetchPendingUploadTableStatus mocks base method.
func (m *MockUploadJob) fetchPendingUploadTableStatus() []*warehouse.TableUploadStatusT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fetchPendingUploadTableStatus")
	ret0, _ := ret[0].([]*warehouse.TableUploadStatusT)
	return ret0
}

// fetchPendingUploadTableStatus indicates an expected call of fetchPendingUploadTableStatus.
func (mr *MockUploadJobMockRecorder) fetchPendingUploadTableStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fetchPendingUploadTableStatus", reflect.TypeOf((*MockUploadJob)(nil).fetchPendingUploadTableStatus))
}

// generateUploadSchema mocks base method.
func (m *MockUploadJob) generateUploadSchema(schemaHandle warehouse.SchemaHandle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "generateUploadSchema", schemaHandle)
	ret0, _ := ret[0].(error)
	return ret0
}

// generateUploadSchema indicates an expected call of generateUploadSchema.
func (mr *MockUploadJobMockRecorder) generateUploadSchema(schemaHandle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "generateUploadSchema", reflect.TypeOf((*MockUploadJob)(nil).generateUploadSchema), schemaHandle)
}

// getAttemptNumber mocks base method.
func (m *MockUploadJob) getAttemptNumber() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getAttemptNumber")
	ret0, _ := ret[0].(int)
	return ret0
}

// getAttemptNumber indicates an expected call of getAttemptNumber.
func (mr *MockUploadJobMockRecorder) getAttemptNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getAttemptNumber", reflect.TypeOf((*MockUploadJob)(nil).getAttemptNumber))
}

// getLoadFileIDRange mocks base method.
func (m *MockUploadJob) getLoadFileIDRange() (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getLoadFileIDRange")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// getLoadFileIDRange indicates an expected call of getLoadFileIDRange.
func (mr *MockUploadJobMockRecorder) getLoadFileIDRange() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getLoadFileIDRange", reflect.TypeOf((*MockUploadJob)(nil).getLoadFileIDRange))
}

// getLoadFilesTableMap mocks base method.
func (m *MockUploadJob) getLoadFilesTableMap() (map[warehouse.TableNameT]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getLoadFilesTableMap")
	ret0, _ := ret[0].(map[warehouse.TableNameT]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getLoadFilesTableMap indicates an expected call of getLoadFilesTableMap.
func (mr *MockUploadJobMockRecorder) getLoadFilesTableMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getLoadFilesTableMap", reflect.TypeOf((*MockUploadJob)(nil).getLoadFilesTableMap))
}

// getNewTimings mocks base method.
func (m *MockUploadJob) getNewTimings(status string) ([]byte, []map[string]string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getNewTimings", status)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]map[string]string)
	return ret0, ret1
}

// getNewTimings indicates an expected call of getNewTimings.
func (mr *MockUploadJobMockRecorder) getNewTimings(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getNewTimings", reflect.TypeOf((*MockUploadJob)(nil).getNewTimings), status)
}

// getTablesToSkip mocks base method.
func (m *MockUploadJob) getTablesToSkip() (map[string]*warehouse.TableUploadIDInfoT, map[string]bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getTablesToSkip")
	ret0, _ := ret[0].(map[string]*warehouse.TableUploadIDInfoT)
	ret1, _ := ret[1].(map[string]bool)
	return ret0, ret1
}

// getTablesToSkip indicates an expected call of getTablesToSkip.
func (mr *MockUploadJobMockRecorder) getTablesToSkip() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getTablesToSkip", reflect.TypeOf((*MockUploadJob)(nil).getTablesToSkip))
}

// getTotalCount mocks base method.
func (m *MockUploadJob) getTotalCount(tName string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getTotalCount", tName)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getTotalCount indicates an expected call of getTotalCount.
func (mr *MockUploadJobMockRecorder) getTotalCount(tName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getTotalCount", reflect.TypeOf((*MockUploadJob)(nil).getTotalCount), tName)
}

// getTotalEventsUploaded mocks base method.
func (m *MockUploadJob) getTotalEventsUploaded(includeDiscards bool) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getTotalEventsUploaded", includeDiscards)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getTotalEventsUploaded indicates an expected call of getTotalEventsUploaded.
func (mr *MockUploadJobMockRecorder) getTotalEventsUploaded(includeDiscards interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getTotalEventsUploaded", reflect.TypeOf((*MockUploadJob)(nil).getTotalEventsUploaded), includeDiscards)
}

// getTotalRowsInLoadFiles mocks base method.
func (m *MockUploadJob) getTotalRowsInLoadFiles() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getTotalRowsInLoadFiles")
	ret0, _ := ret[0].(int64)
	return ret0
}

// getTotalRowsInLoadFiles indicates an expected call of getTotalRowsInLoadFiles.
func (mr *MockUploadJobMockRecorder) getTotalRowsInLoadFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getTotalRowsInLoadFiles", reflect.TypeOf((*MockUploadJob)(nil).getTotalRowsInLoadFiles))
}

// getTotalRowsInStagingFiles mocks base method.
func (m *MockUploadJob) getTotalRowsInStagingFiles() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getTotalRowsInStagingFiles")
	ret0, _ := ret[0].(int64)
	return ret0
}

// getTotalRowsInStagingFiles indicates an expected call of getTotalRowsInStagingFiles.
func (mr *MockUploadJobMockRecorder) getTotalRowsInStagingFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getTotalRowsInStagingFiles", reflect.TypeOf((*MockUploadJob)(nil).getTotalRowsInStagingFiles))
}

// getUploadFirstAttemptTime mocks base method.
func (m *MockUploadJob) getUploadFirstAttemptTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getUploadFirstAttemptTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// getUploadFirstAttemptTime indicates an expected call of getUploadFirstAttemptTime.
func (mr *MockUploadJobMockRecorder) getUploadFirstAttemptTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getUploadFirstAttemptTime", reflect.TypeOf((*MockUploadJob)(nil).getUploadFirstAttemptTime))
}

// getUploadTimings mocks base method.
func (m *MockUploadJob) getUploadTimings() []map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getUploadTimings")
	ret0, _ := ret[0].([]map[string]string)
	return ret0
}

// getUploadTimings indicates an expected call of getUploadTimings.
func (mr *MockUploadJobMockRecorder) getUploadTimings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getUploadTimings", reflect.TypeOf((*MockUploadJob)(nil).getUploadTimings))
}

// id mocks base method.
func (m *MockUploadJob) id() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "id")
	ret0, _ := ret[0].(int64)
	return ret0
}

// id indicates an expected call of id.
func (mr *MockUploadJobMockRecorder) id() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "id", reflect.TypeOf((*MockUploadJob)(nil).id))
}

// identifiesTableName mocks base method.
func (m *MockUploadJob) identifiesTableName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "identifiesTableName")
	ret0, _ := ret[0].(string)
	return ret0
}

// identifiesTableName indicates an expected call of identifiesTableName.
func (mr *MockUploadJobMockRecorder) identifiesTableName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "identifiesTableName", reflect.TypeOf((*MockUploadJob)(nil).identifiesTableName))
}

// identityMappingsTableName mocks base method.
func (m *MockUploadJob) identityMappingsTableName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "identityMappingsTableName")
	ret0, _ := ret[0].(string)
	return ret0
}

// identityMappingsTableName indicates an expected call of identityMappingsTableName.
func (mr *MockUploadJobMockRecorder) identityMappingsTableName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "identityMappingsTableName", reflect.TypeOf((*MockUploadJob)(nil).identityMappingsTableName))
}

// identityMergeRulesTableName mocks base method.
func (m *MockUploadJob) identityMergeRulesTableName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "identityMergeRulesTableName")
	ret0, _ := ret[0].(string)
	return ret0
}

// identityMergeRulesTableName indicates an expected call of identityMergeRulesTableName.
func (mr *MockUploadJobMockRecorder) identityMergeRulesTableName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "identityMergeRulesTableName", reflect.TypeOf((*MockUploadJob)(nil).identityMergeRulesTableName))
}

// initTableUploads mocks base method.
func (m *MockUploadJob) initTableUploads() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "initTableUploads")
	ret0, _ := ret[0].(error)
	return ret0
}

// initTableUploads indicates an expected call of initTableUploads.
func (mr *MockUploadJobMockRecorder) initTableUploads() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "initTableUploads", reflect.TypeOf((*MockUploadJob)(nil).initTableUploads))
}

// loadAllTablesExcept mocks base method.
func (m *MockUploadJob) loadAllTablesExcept(skipLoadForTables []string, loadFilesTableMap map[warehouse.TableNameT]bool) []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "loadAllTablesExcept", skipLoadForTables, loadFilesTableMap)
	ret0, _ := ret[0].([]error)
	return ret0
}

// loadAllTablesExcept indicates an expected call of loadAllTablesExcept.
func (mr *MockUploadJobMockRecorder) loadAllTablesExcept(skipLoadForTables, loadFilesTableMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "loadAllTablesExcept", reflect.TypeOf((*MockUploadJob)(nil).loadAllTablesExcept), skipLoadForTables, loadFilesTableMap)
}

// loadIdentityTables mocks base method.
func (m *MockUploadJob) loadIdentityTables(populateHistoricIdentities bool) ([]error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "loadIdentityTables", populateHistoricIdentities)
	ret0, _ := ret[0].([]error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// loadIdentityTables indicates an expected call of loadIdentityTables.
func (mr *MockUploadJobMockRecorder) loadIdentityTables(populateHistoricIdentities interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "loadIdentityTables", reflect.TypeOf((*MockUploadJob)(nil).loadIdentityTables), populateHistoricIdentities)
}

// loadTable mocks base method.
func (m *MockUploadJob) loadTable(tName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "loadTable", tName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// loadTable indicates an expected call of loadTable.
func (mr *MockUploadJobMockRecorder) loadTable(tName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "loadTable", reflect.TypeOf((*MockUploadJob)(nil).loadTable), tName)
}

// loadUserTables mocks base method.
func (m *MockUploadJob) loadUserTables(loadFilesTableMap map[warehouse.TableNameT]bool) ([]error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "loadUserTables", loadFilesTableMap)
	ret0, _ := ret[0].([]error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// loadUserTables indicates an expected call of loadUserTables.
func (mr *MockUploadJobMockRecorder) loadUserTables(loadFilesTableMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "loadUserTables", reflect.TypeOf((*MockUploadJob)(nil).loadUserTables), loadFilesTableMap)
}

// matchRowsInStagingAndLoadFiles mocks base method.
func (m *MockUploadJob) matchRowsInStagingAndLoadFiles() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "matchRowsInStagingAndLoadFiles")
}

// matchRowsInStagingAndLoadFiles indicates an expected call of matchRowsInStagingAndLoadFiles.
func (mr *MockUploadJobMockRecorder) matchRowsInStagingAndLoadFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "matchRowsInStagingAndLoadFiles", reflect.TypeOf((*MockUploadJob)(nil).matchRowsInStagingAndLoadFiles))
}

// processLoadTableResponse mocks base method.
func (m *MockUploadJob) processLoadTableResponse(errorMap map[string]error) ([]error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "processLoadTableResponse", errorMap)
	ret0, _ := ret[0].([]error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// processLoadTableResponse indicates an expected call of processLoadTableResponse.
func (mr *MockUploadJobMockRecorder) processLoadTableResponse(errorMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "processLoadTableResponse", reflect.TypeOf((*MockUploadJob)(nil).processLoadTableResponse), errorMap)
}

// resolveIdentities mocks base method.
func (m *MockUploadJob) resolveIdentities(populateHistoricIdentities bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "resolveIdentities", populateHistoricIdentities)
	ret0, _ := ret[0].(error)
	return ret0
}

// resolveIdentities indicates an expected call of resolveIdentities.
func (mr *MockUploadJobMockRecorder) resolveIdentities(populateHistoricIdentities interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "resolveIdentities", reflect.TypeOf((*MockUploadJob)(nil).resolveIdentities), populateHistoricIdentities)
}

// run mocks base method.
func (m *MockUploadJob) run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "run")
	ret0, _ := ret[0].(error)
	return ret0
}

// run indicates an expected call of run.
func (mr *MockUploadJobMockRecorder) run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "run", reflect.TypeOf((*MockUploadJob)(nil).run))
}

// setLoadFileIDs mocks base method.
func (m *MockUploadJob) setLoadFileIDs(startLoadFileID, endLoadFileID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setLoadFileIDs", startLoadFileID, endLoadFileID)
	ret0, _ := ret[0].(error)
	return ret0
}

// setLoadFileIDs indicates an expected call of setLoadFileIDs.
func (mr *MockUploadJobMockRecorder) setLoadFileIDs(startLoadFileID, endLoadFileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setLoadFileIDs", reflect.TypeOf((*MockUploadJob)(nil).setLoadFileIDs), startLoadFileID, endLoadFileID)
}

// setMergedSchema mocks base method.
func (m *MockUploadJob) setMergedSchema(mergedSchema warehouseutils.SchemaT) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setMergedSchema", mergedSchema)
	ret0, _ := ret[0].(error)
	return ret0
}

// setMergedSchema indicates an expected call of setMergedSchema.
func (mr *MockUploadJobMockRecorder) setMergedSchema(mergedSchema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setMergedSchema", reflect.TypeOf((*MockUploadJob)(nil).setMergedSchema), mergedSchema)
}

// setStagingFilesStatus mocks base method.
func (m *MockUploadJob) setStagingFilesStatus(stagingFiles []*warehouse.StagingFileT, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setStagingFilesStatus", stagingFiles, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// setStagingFilesStatus indicates an expected call of setStagingFilesStatus.
func (mr *MockUploadJobMockRecorder) setStagingFilesStatus(stagingFiles, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setStagingFilesStatus", reflect.TypeOf((*MockUploadJob)(nil).setStagingFilesStatus), stagingFiles, status)
}

// setUpdatedTableSchema mocks base method.
func (m *MockUploadJob) setUpdatedTableSchema(tableName string, updatedSchema map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setUpdatedTableSchema", tableName, updatedSchema)
}

// setUpdatedTableSchema indicates an expected call of setUpdatedTableSchema.
func (mr *MockUploadJobMockRecorder) setUpdatedTableSchema(tableName, updatedSchema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setUpdatedTableSchema", reflect.TypeOf((*MockUploadJob)(nil).setUpdatedTableSchema), tableName, updatedSchema)
}

// setUploadError mocks base method.
func (m *MockUploadJob) setUploadError(statusError error, state string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setUploadError", statusError, state)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// setUploadError indicates an expected call of setUploadError.
func (mr *MockUploadJobMockRecorder) setUploadError(statusError, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setUploadError", reflect.TypeOf((*MockUploadJob)(nil).setUploadError), statusError, state)
}

// setUploadSchema mocks base method.
func (m *MockUploadJob) setUploadSchema(consolidatedSchema warehouseutils.SchemaT) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setUploadSchema", consolidatedSchema)
	ret0, _ := ret[0].(error)
	return ret0
}

// setUploadSchema indicates an expected call of setUploadSchema.
func (mr *MockUploadJobMockRecorder) setUploadSchema(consolidatedSchema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setUploadSchema", reflect.TypeOf((*MockUploadJob)(nil).setUploadSchema), consolidatedSchema)
}

// setUploadStatus mocks base method.
func (m *MockUploadJob) setUploadStatus(statusOpts warehouse.UploadStatusOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setUploadStatus", statusOpts)
	ret0, _ := ret[0].(error)
	return ret0
}

// setUploadStatus indicates an expected call of setUploadStatus.
func (mr *MockUploadJobMockRecorder) setUploadStatus(statusOpts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setUploadStatus", reflect.TypeOf((*MockUploadJob)(nil).setUploadStatus), statusOpts)
}

// syncRemoteSchema mocks base method.
func (m *MockUploadJob) syncRemoteSchema() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "syncRemoteSchema")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// syncRemoteSchema indicates an expected call of syncRemoteSchema.
func (mr *MockUploadJobMockRecorder) syncRemoteSchema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "syncRemoteSchema", reflect.TypeOf((*MockUploadJob)(nil).syncRemoteSchema))
}

// trackLongRunningUpload mocks base method.
func (m *MockUploadJob) trackLongRunningUpload() chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "trackLongRunningUpload")
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

// trackLongRunningUpload indicates an expected call of trackLongRunningUpload.
func (mr *MockUploadJobMockRecorder) trackLongRunningUpload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "trackLongRunningUpload", reflect.TypeOf((*MockUploadJob)(nil).trackLongRunningUpload))
}

// triggerUploadNow mocks base method.
func (m *MockUploadJob) triggerUploadNow() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "triggerUploadNow")
	ret0, _ := ret[0].(error)
	return ret0
}

// triggerUploadNow indicates an expected call of triggerUploadNow.
func (mr *MockUploadJobMockRecorder) triggerUploadNow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "triggerUploadNow", reflect.TypeOf((*MockUploadJob)(nil).triggerUploadNow))
}

// updateSchema mocks base method.
func (m *MockUploadJob) updateSchema(tName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateSchema", tName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// updateSchema indicates an expected call of updateSchema.
func (mr *MockUploadJobMockRecorder) updateSchema(tName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateSchema", reflect.TypeOf((*MockUploadJob)(nil).updateSchema), tName)
}

// updateTableEventsCount mocks base method.
func (m *MockUploadJob) updateTableEventsCount(tableName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateTableEventsCount", tableName)
	ret0, _ := ret[0].(error)
	return ret0
}

// updateTableEventsCount indicates an expected call of updateTableEventsCount.
func (mr *MockUploadJobMockRecorder) updateTableEventsCount(tableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateTableEventsCount", reflect.TypeOf((*MockUploadJob)(nil).updateTableEventsCount), tableName)
}

// updateTableSchema mocks base method.
func (m *MockUploadJob) updateTableSchema(tName string, tableSchemaDiff warehouseutils.TableSchemaDiffT) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateTableSchema", tName, tableSchemaDiff)
	ret0, _ := ret[0].(error)
	return ret0
}

// updateTableSchema indicates an expected call of updateTableSchema.
func (mr *MockUploadJobMockRecorder) updateTableSchema(tName, tableSchemaDiff interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateTableSchema", reflect.TypeOf((*MockUploadJob)(nil).updateTableSchema), tName, tableSchemaDiff)
}

// usersTableName mocks base method.
func (m *MockUploadJob) usersTableName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "usersTableName")
	ret0, _ := ret[0].(string)
	return ret0
}

// usersTableName indicates an expected call of usersTableName.
func (mr *MockUploadJobMockRecorder) usersTableName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "usersTableName", reflect.TypeOf((*MockUploadJob)(nil).usersTableName))
}

// validateDestinationCredentials mocks base method.
func (m *MockUploadJob) validateDestinationCredentials() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "validateDestinationCredentials")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// validateDestinationCredentials indicates an expected call of validateDestinationCredentials.
func (mr *MockUploadJobMockRecorder) validateDestinationCredentials() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "validateDestinationCredentials", reflect.TypeOf((*MockUploadJob)(nil).validateDestinationCredentials))
}

// wh mocks base method.
func (m *MockUploadJob) wh() warehouseutils.Warehouse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "wh")
	ret0, _ := ret[0].(warehouseutils.Warehouse)
	return ret0
}

// wh indicates an expected call of wh.
func (mr *MockUploadJobMockRecorder) wh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "wh", reflect.TypeOf((*MockUploadJob)(nil).wh))
}
