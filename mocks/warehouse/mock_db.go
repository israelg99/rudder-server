// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package mock_warehouse is a generated GoMock package.
package mock_warehouse

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	warehouseutils "github.com/rudderlabs/rudder-server/warehouse/utils"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// GetLatestUploadStatus mocks base method.
func (m *MockDB) GetLatestUploadStatus(ctx context.Context, destType, sourceID, destinationID string) (int64, string, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestUploadStatus", ctx, destType, sourceID, destinationID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetLatestUploadStatus indicates an expected call of GetLatestUploadStatus.
func (mr *MockDBMockRecorder) GetLatestUploadStatus(ctx, destType, sourceID, destinationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestUploadStatus", reflect.TypeOf((*MockDB)(nil).GetLatestUploadStatus), ctx, destType, sourceID, destinationID)
}

// GetUploadsCount mocks base method.
func (m *MockDB) GetUploadsCount(ctx context.Context, filterClauses ...warehouseutils.FilterClause) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range filterClauses {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUploadsCount", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadsCount indicates an expected call of GetUploadsCount.
func (mr *MockDBMockRecorder) GetUploadsCount(ctx interface{}, filterClauses ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, filterClauses...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadsCount", reflect.TypeOf((*MockDB)(nil).GetUploadsCount), varargs...)
}

// RetryUploads mocks base method.
func (m *MockDB) RetryUploads(ctx context.Context, filterClauses ...warehouseutils.FilterClause) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range filterClauses {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetryUploads", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetryUploads indicates an expected call of RetryUploads.
func (mr *MockDBMockRecorder) RetryUploads(ctx interface{}, filterClauses ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, filterClauses...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryUploads", reflect.TypeOf((*MockDB)(nil).RetryUploads), varargs...)
}

// SetUploadColumns mocks base method.
func (m *MockDB) SetUploadColumns(uploadID int64, opts warehouseutils.UploadColumnsOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUploadColumns", uploadID, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUploadColumns indicates an expected call of SetUploadColumns.
func (mr *MockDBMockRecorder) SetUploadColumns(uploadID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUploadColumns", reflect.TypeOf((*MockDB)(nil).SetUploadColumns), uploadID, opts)
}
