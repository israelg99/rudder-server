// Code generated by MockGen. DO NOT EDIT.
// Source: table_upload.go

// Package warehouse is a generated GoMock package.
package warehouse

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	warehouse "github.com/rudderlabs/rudder-server/warehouse"
)

// MockTableUpload is a mock of TableUpload interface.
type MockTableUpload struct {
	ctrl     *gomock.Controller
	recorder *MockTableUploadMockRecorder
}

// MockTableUploadMockRecorder is the mock recorder for MockTableUpload.
type MockTableUploadMockRecorder struct {
	mock *MockTableUpload
}

// NewMockTableUpload creates a new mock instance.
func NewMockTableUpload(ctrl *gomock.Controller) *MockTableUpload {
	mock := &MockTableUpload{ctrl: ctrl}
	mock.recorder = &MockTableUploadMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTableUpload) EXPECT() *MockTableUploadMockRecorder {
	return m.recorder
}

// getNumEvents mocks base method.
func (m *MockTableUpload) getNumEvents() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getNumEvents")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getNumEvents indicates an expected call of getNumEvents.
func (mr *MockTableUploadMockRecorder) getNumEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getNumEvents", reflect.TypeOf((*MockTableUpload)(nil).getNumEvents))
}

// getTotalEvents mocks base method.
func (m *MockTableUpload) getTotalEvents() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getTotalEvents")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getTotalEvents indicates an expected call of getTotalEvents.
func (mr *MockTableUploadMockRecorder) getTotalEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getTotalEvents", reflect.TypeOf((*MockTableUpload)(nil).getTotalEvents))
}

// setError mocks base method.
func (m *MockTableUpload) setError(status string, statusError error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setError", status, statusError)
	ret0, _ := ret[0].(error)
	return ret0
}

// setError indicates an expected call of setError.
func (mr *MockTableUploadMockRecorder) setError(status, statusError interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setError", reflect.TypeOf((*MockTableUpload)(nil).setError), status, statusError)
}

// setStatus mocks base method.
func (m *MockTableUpload) setStatus(status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setStatus", status)
	ret0, _ := ret[0].(error)
	return ret0
}

// setStatus indicates an expected call of setStatus.
func (mr *MockTableUploadMockRecorder) setStatus(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setStatus", reflect.TypeOf((*MockTableUpload)(nil).setStatus), status)
}

// MockTableUploadFactory is a mock of TableUploadFactory interface.
type MockTableUploadFactory struct {
	ctrl     *gomock.Controller
	recorder *MockTableUploadFactoryMockRecorder
}

// MockTableUploadFactoryMockRecorder is the mock recorder for MockTableUploadFactory.
type MockTableUploadFactoryMockRecorder struct {
	mock *MockTableUploadFactory
}

// NewMockTableUploadFactory creates a new mock instance.
func NewMockTableUploadFactory(ctrl *gomock.Controller) *MockTableUploadFactory {
	mock := &MockTableUploadFactory{ctrl: ctrl}
	mock.recorder = &MockTableUploadFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTableUploadFactory) EXPECT() *MockTableUploadFactoryMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockTableUploadFactory) New(uploadID int64, tableName string) warehouse.TableUpload {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", uploadID, tableName)
	ret0, _ := ret[0].(warehouse.TableUpload)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockTableUploadFactoryMockRecorder) New(uploadID, tableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockTableUploadFactory)(nil).New), uploadID, tableName)
}
