// Code generated by MockGen. DO NOT EDIT.
// Source: schema.go

// Package mock_warehouse is a generated GoMock package.
package mock_warehouse

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	manager "github.com/rudderlabs/rudder-server/warehouse/manager"
	warehouseutils "github.com/rudderlabs/rudder-server/warehouse/utils"
)

// MockSchemaHandle is a mock of SchemaHandle interface.
type MockSchemaHandle struct {
	ctrl     *gomock.Controller
	recorder *MockSchemaHandleMockRecorder
}

// MockSchemaHandleMockRecorder is the mock recorder for MockSchemaHandle.
type MockSchemaHandleMockRecorder struct {
	mock *MockSchemaHandle
}

// NewMockSchemaHandle creates a new mock instance.
func NewMockSchemaHandle(ctrl *gomock.Controller) *MockSchemaHandle {
	mock := &MockSchemaHandle{ctrl: ctrl}
	mock.recorder = &MockSchemaHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchemaHandle) EXPECT() *MockSchemaHandleMockRecorder {
	return m.recorder
}

// consolidateStagingFilesSchemaUsingWarehouseSchema mocks base method.
func (m *MockSchemaHandle) consolidateStagingFilesSchemaUsingWarehouseSchema() warehouseutils.SchemaT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "consolidateStagingFilesSchemaUsingWarehouseSchema")
	ret0, _ := ret[0].(warehouseutils.SchemaT)
	return ret0
}

// consolidateStagingFilesSchemaUsingWarehouseSchema indicates an expected call of consolidateStagingFilesSchemaUsingWarehouseSchema.
func (mr *MockSchemaHandleMockRecorder) consolidateStagingFilesSchemaUsingWarehouseSchema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "consolidateStagingFilesSchemaUsingWarehouseSchema", reflect.TypeOf((*MockSchemaHandle)(nil).consolidateStagingFilesSchemaUsingWarehouseSchema))
}

// fetchLocalSchema mocks base method.
func (m *MockSchemaHandle) fetchLocalSchema() warehouseutils.SchemaT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fetchLocalSchema")
	ret0, _ := ret[0].(warehouseutils.SchemaT)
	return ret0
}

// fetchLocalSchema indicates an expected call of fetchLocalSchema.
func (mr *MockSchemaHandleMockRecorder) fetchLocalSchema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fetchLocalSchema", reflect.TypeOf((*MockSchemaHandle)(nil).fetchLocalSchema))
}

// fetchSchemaFromWarehouse mocks base method.
func (m *MockSchemaHandle) fetchSchemaFromWarehouse(whManager manager.ManagerI) (warehouseutils.SchemaT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fetchSchemaFromWarehouse", whManager)
	ret0, _ := ret[0].(warehouseutils.SchemaT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// fetchSchemaFromWarehouse indicates an expected call of fetchSchemaFromWarehouse.
func (mr *MockSchemaHandleMockRecorder) fetchSchemaFromWarehouse(whManager interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fetchSchemaFromWarehouse", reflect.TypeOf((*MockSchemaHandle)(nil).fetchSchemaFromWarehouse), whManager)
}

// getDiscardsSchema mocks base method.
func (m *MockSchemaHandle) getDiscardsSchema() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getDiscardsSchema")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// getDiscardsSchema indicates an expected call of getDiscardsSchema.
func (mr *MockSchemaHandleMockRecorder) getDiscardsSchema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getDiscardsSchema", reflect.TypeOf((*MockSchemaHandle)(nil).getDiscardsSchema))
}

// getIdentitiesMappingsSchema mocks base method.
func (m *MockSchemaHandle) getIdentitiesMappingsSchema() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getIdentitiesMappingsSchema")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// getIdentitiesMappingsSchema indicates an expected call of getIdentitiesMappingsSchema.
func (mr *MockSchemaHandleMockRecorder) getIdentitiesMappingsSchema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getIdentitiesMappingsSchema", reflect.TypeOf((*MockSchemaHandle)(nil).getIdentitiesMappingsSchema))
}

// getMergeRulesSchema mocks base method.
func (m *MockSchemaHandle) getMergeRulesSchema() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getMergeRulesSchema")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// getMergeRulesSchema indicates an expected call of getMergeRulesSchema.
func (mr *MockSchemaHandleMockRecorder) getMergeRulesSchema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getMergeRulesSchema", reflect.TypeOf((*MockSchemaHandle)(nil).getMergeRulesSchema))
}

// isIDResolutionEnabled mocks base method.
func (m *MockSchemaHandle) isIDResolutionEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isIDResolutionEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// isIDResolutionEnabled indicates an expected call of isIDResolutionEnabled.
func (mr *MockSchemaHandleMockRecorder) isIDResolutionEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isIDResolutionEnabled", reflect.TypeOf((*MockSchemaHandle)(nil).isIDResolutionEnabled))
}

// localSchema mocks base method.
func (m *MockSchemaHandle) localSchema() warehouseutils.SchemaT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "localSchema")
	ret0, _ := ret[0].(warehouseutils.SchemaT)
	return ret0
}

// localSchema indicates an expected call of localSchema.
func (mr *MockSchemaHandleMockRecorder) localSchema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "localSchema", reflect.TypeOf((*MockSchemaHandle)(nil).localSchema))
}

// safeName mocks base method.
func (m *MockSchemaHandle) safeName(columnName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "safeName", columnName)
	ret0, _ := ret[0].(string)
	return ret0
}

// safeName indicates an expected call of safeName.
func (mr *MockSchemaHandleMockRecorder) safeName(columnName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "safeName", reflect.TypeOf((*MockSchemaHandle)(nil).safeName), columnName)
}

// setLocalSchema mocks base method.
func (m *MockSchemaHandle) setLocalSchema(currentSchema warehouseutils.SchemaT) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setLocalSchema", currentSchema)
}

// setLocalSchema indicates an expected call of setLocalSchema.
func (mr *MockSchemaHandleMockRecorder) setLocalSchema(currentSchema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setLocalSchema", reflect.TypeOf((*MockSchemaHandle)(nil).setLocalSchema), currentSchema)
}

// setSchemaFromWarehouse mocks base method.
func (m *MockSchemaHandle) setSchemaFromWarehouse(schemaInWarehouse warehouseutils.SchemaT) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setSchemaFromWarehouse", schemaInWarehouse)
}

// setSchemaFromWarehouse indicates an expected call of setSchemaFromWarehouse.
func (mr *MockSchemaHandleMockRecorder) setSchemaFromWarehouse(schemaInWarehouse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setSchemaFromWarehouse", reflect.TypeOf((*MockSchemaHandle)(nil).setSchemaFromWarehouse), schemaInWarehouse)
}

// setUploadSchema mocks base method.
func (m *MockSchemaHandle) setUploadSchema(currentSchema warehouseutils.SchemaT) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setUploadSchema", currentSchema)
}

// setUploadSchema indicates an expected call of setUploadSchema.
func (mr *MockSchemaHandleMockRecorder) setUploadSchema(currentSchema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setUploadSchema", reflect.TypeOf((*MockSchemaHandle)(nil).setUploadSchema), currentSchema)
}

// updateLocalSchema mocks base method.
func (m *MockSchemaHandle) updateLocalSchema(updatedSchema warehouseutils.SchemaT) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateLocalSchema", updatedSchema)
	ret0, _ := ret[0].(error)
	return ret0
}

// updateLocalSchema indicates an expected call of updateLocalSchema.
func (mr *MockSchemaHandleMockRecorder) updateLocalSchema(updatedSchema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateLocalSchema", reflect.TypeOf((*MockSchemaHandle)(nil).updateLocalSchema), updatedSchema)
}

// uploadSchema mocks base method.
func (m *MockSchemaHandle) uploadSchema() warehouseutils.SchemaT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "uploadSchema")
	ret0, _ := ret[0].(warehouseutils.SchemaT)
	return ret0
}

// uploadSchema indicates an expected call of uploadSchema.
func (mr *MockSchemaHandleMockRecorder) uploadSchema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "uploadSchema", reflect.TypeOf((*MockSchemaHandle)(nil).uploadSchema))
}

// warehouseSchema mocks base method.
func (m *MockSchemaHandle) warehouseSchema() warehouseutils.SchemaT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "warehouseSchema")
	ret0, _ := ret[0].(warehouseutils.SchemaT)
	return ret0
}

// warehouseSchema indicates an expected call of warehouseSchema.
func (mr *MockSchemaHandleMockRecorder) warehouseSchema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "warehouseSchema", reflect.TypeOf((*MockSchemaHandle)(nil).warehouseSchema))
}
